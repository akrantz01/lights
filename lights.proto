syntax = "proto3";

package lights;
option go_package = "github.com/akrantz01/lights/lights-web/lights/pb";

// An RGB color with values in the range 0-255 inclusive.
message Color {
  uint32 r = 1;
  uint32 g = 2;
  uint32 b = 3;
}

// The arguments for the Set method
message SetArgs {
  repeated uint32 indexes = 1;
  Color color = 2;
}

// The arguments for the SetAll method
message SetAllArgs {
  repeated Color colors = 1;
}

// The arguments for the Brightness method
message BrightnessArgs {
  uint32 brightness = 1;
}

// The arguments for the StartAnimation method
message StartAnimationArgs {
  string id = 1;
}

// The arguments for the RegisterAnimation method
message RegisterAnimationArgs {
  string id = 1;
  bytes wasm = 2;
}

// The return type for the RegisterAnimation method
message AnimationStatus {
  bool success = 1;
}

// The arguments for the UnregisterAnimation method
message UnregisterAnimationArgs {
  string id = 1;
}

// An empty message used for RPC messages
message Empty {}

// Controls an individual strip of NeoPixels
service Controller {
  // Set the color of a set of pixels
  rpc Set(SetArgs) returns (Empty) {}

  // Set the color of all pixels at the same time
  rpc SetAll(SetAllArgs) returns (Empty) {}

  // Fill the entire strip with the given color
  rpc Fill(Color) returns (Empty) {}

  // Set the brightness of the strip. Only values 0-100 inclusive are accepted
  rpc Brightness(BrightnessArgs) returns (Empty) {}

  // Run the specified animation by id. Once started, no other actions can be performed until stopped.
  rpc StartAnimation(StartAnimationArgs) returns (Empty) {}

  // Stop the currently running animation. This method is idempotent.
  rpc StopAnimation(Empty) returns (Empty) {}

  // Register an animation with an associated id
  rpc RegisterAnimation(RegisterAnimationArgs) returns (AnimationStatus) {}

  // Remove an animation from the registry by id
  rpc UnregisterAnimation(UnregisterAnimationArgs) returns (Empty) {}
}
