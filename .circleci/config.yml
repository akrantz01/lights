version: 2.1

orbs:
  rust: circleci/rust@1.6.0

executors:
  linux-amd64:
    machine:
      image: ubuntu-2004:current
    resource_class: large
  linux-arm64:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.large

commands:
  rust-build:
    parameters:
      crate:
        type: string
      working_directory:
        type: string
    steps:
      - restore_cache:
          keys:
            - cargo-<< parameters.crate >>-{{ arch }}-{{ checksum "controller/Cargo.lock" }}
      - run:
          name: Cargo Build
          command: cargo build --release
          working_directory: << parameters.working_directory >>
      - save_cache:
          key: cargo-<< parameters.crate >>-{{ arch }}-{{ checksum "controller/Cargo.lock" }}
          paths:
            - ~/.cargo
            - << parameters.working_directory >>/target

jobs:
  build-api:
    parameters:
      os:
        description: the os being built for
        type: string
        default: linux
      arch:
        description: the architecture being built for
        type: string
    executor: << parameters.os >>-<< parameters.arch >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-api-{{ arch }}-{{ checksum "api/go.sum" }}
      - run:
          name: go mod download
          command: go mod download
          working_directory: ~/project/api
      - save_cache:
          key: go-mod-api-{{ arch }}-{{ checksum "api/go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          name: Build API
          command: go build -o ./lights-api.<< parameters.os >>-<< parameters.arch >>
          environment:
            GOOS: << parameters.os >>
            GOARCH: << parameters.arch >>
          working_directory: ~/project/api
      - store_artifacts:
          path: ~/project/api/lights-api.<< parameters.os >>-<< parameters.arch >>
          destination: lights-api.<< parameters.os >>-<< parameters.arch >>

  build-controller:
    parameters:
      os:
        description: the os being built for
        type: string
        default: linux
      arch:
        description: the architecture being built for
        type: string
    executor: << parameters.os >>-<< parameters.arch >>
    steps:
      - checkout
      - rust/install
      - run:
          name: Install LLVM 12
          command: |
            wget https://apt.llvm.org/llvm.sh
            sudo bash ./llvm.sh 12
            echo 'export LLVM_CONFIG_PATH=/usr/bin/llvm-config-12' >> "$BASH_ENV"
            echo 'export LLVM_SYS_120_PREFIX=/usr/bin/llvm-config-12' >> "$BASH_ENV"
            source "$BASH_ENV"
      - rust-build:
          crate: controller
          working_directory: ~/project/controller
      - store_artifacts:
          path: ~/project/controller/target/release/controller
          destination: lights-controller.<< parameters.os >>-<< parameters.arch >>

  build-animation:
    parameters:
      animation:
        description: the animation to build
        type: string
    machine:
      image: ubuntu-2004:current
    resource_class: medium
    steps:
      - checkout
      - rust/install
      - run:
          name: Install wasm32-unknown-unknown
          command: rustup target add wasm32-unknown-unknown
      - rust-build:
          crate: << parameters.animation >>
          working_directory: ~/project/sample-animations/<< parameters.animation >>
      - store_artifacts:
          path: ~/project/sample-animations/<< parameters.animation >>/target/wasm32-unknown-unknown/release/<< parameters.animation >>.wasm
          destination: animation-<< parameters.animation >>.wasm

workflows:
  build:
    jobs:
      - build-api:
          matrix:
            parameters:
              arch:
                - amd64
                - arm64
      - build-controller:
          matrix:
            parameters:
              arch:
                - amd64
                - arm64
      - build-animation:
          matrix:
            parameters:
              animation:
                - rainbow
                - simple
