version: 2.1

orbs:
  rust: circleci/rust@1.6.0

executors:
  linux-amd64:
    machine:
      image: ubuntu-2004:current
    resource_class: large
  linux-arm64:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.large

commands:
  rust-build:
    parameters:
      crate:
        type: string
      working_directory:
        type: string
      with_features:
        type: boolean
        default: false
      features:
        type: string
        default: ''
      no_default_features:
        type: boolean
        default: false
    steps:
      - restore_cache:
          keys:
            - cargo-<< parameters.crate >>-<<# parameters.with_features >><< parameters.features >><</ parameters.with_features >>-{{ arch }}-{{ checksum "controller/Cargo.lock" }}
      - run:
          name: Cargo Build
          command: >-
            cargo build --release
            <<# parameters.no_default_features >>--no-default-features<</ parameters.no_default_features >>
            <<# parameters.with_features >>--features << parameters.features >><</ parameters.with_features >>
          working_directory: << parameters.working_directory >>
      - save_cache:
          key: cargo-<< parameters.crate >>-<<# parameters.with_features >><< parameters.features >><</ parameters.with_features >>-{{ arch }}-{{ checksum "controller/Cargo.lock" }}
          paths:
            - ~/.cargo
            - << parameters.working_directory >>/target

jobs:
  build-api:
    parameters:
      os:
        description: the os being built for
        type: string
        default: linux
      arch:
        description: the architecture being built for
        type: string
    executor: << parameters.os >>-<< parameters.arch >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-api-{{ arch }}-{{ checksum "api/go.sum" }}
      - run:
          name: go mod download
          command: go mod download
          working_directory: ~/project/api
      - save_cache:
          key: go-mod-api-{{ arch }}-{{ checksum "api/go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          name: Build API
          command: go build -o ~/build/lights-api.<< parameters.os >>-<< parameters.arch >> -buildmode pie
          environment:
            GOOS: << parameters.os >>
            GOARCH: << parameters.arch >>
          working_directory: ~/project/api
      - persist_to_workspace:
          root: ~/build
          paths:
            - lights-api.*
      - store_artifacts:
          path: ~/project/api/lights-api.<< parameters.os >>-<< parameters.arch >>
          destination: lights-api.<< parameters.os >>-<< parameters.arch >>

  build-controller:
    parameters:
      os:
        description: the os being built for
        type: string
        default: linux
      arch:
        description: the architecture being built for
        type: string
      compiler:
        description: the WASM compiler to use
        type: string
    executor: << parameters.os >>-<< parameters.arch >>
    steps:
      - checkout
      - rust/install
      - run:
          name: Install LLVM 12
          command: |
            wget https://apt.llvm.org/llvm.sh
            sudo bash ./llvm.sh 12
            sudo apt-get install -y libclang-12-dev
            echo 'export LLVM_CONFIG_PATH=/usr/lib/llvm-12/bin/llvm-config' >> "$BASH_ENV"
            echo 'export LLVM_SYS_120_PREFIX=/usr/lib/llvm-12' >> "$BASH_ENV"
            source "$BASH_ENV"
      - rust-build:
          crate: controller
          working_directory: ~/project/controller
          no_default_features: true
          with_features: true
          features: << parameters.compiler >>
      - run:
          name: Move files for packaging
          command: |
            mkdir -p ~/build
            mv ~/project/controller/target/release/controller ~/build/lights-controller.<< parameters.compiler >>.<< parameters.os >>-<< parameters.arch >>
      - persist_to_workspace:
          root: ~/build
          paths:
            - lights-controller.*
      - store_artifacts:
          path: ~/project/controller/target/release/controller
          destination: lights-controller.<< parameters.compiler >>.<< parameters.os >>-<< parameters.arch >>

  build-animation:
    parameters:
      animation:
        description: the animation to build
        type: string
    machine:
      image: ubuntu-2004:current
    resource_class: medium
    steps:
      - checkout
      - rust/install
      - run:
          name: Install wasm32-unknown-unknown
          command: rustup target add wasm32-unknown-unknown
      - rust-build:
          crate: << parameters.animation >>
          working_directory: ~/project/sample-animations/<< parameters.animation >>
      - run:
          name: Move files for packaging
          command: |
            mkdir -p ~/build
            mv ~/project/sample-animations/<< parameters.animation >>/target/wasm32-unknown-unknown/release/<< parameters.animation >>.wasm ~/build/animation-<< parameters.animation >>.wasm
      - persist_to_workspace:
          root: ~/build
          paths:
            - animation-*
      - store_artifacts:
          path: ~/project/sample-animations/<< parameters.animation >>/target/wasm32-unknown-unknown/release/<< parameters.animation >>.wasm
          destination: animation-<< parameters.animation >>.wasm

  package-os:
    parameters:
      arch:
        description: the architecture to package for
        type: string
      compiler:
        description: the WASM compiler to use
        type: string
      kind:
        description: the kind of package to build (deb, rpm)
        type: string
    machine:
      image: ubuntu-2004:current
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: /build
      - run:
          name: Testing
          command: ls -la /build

default-parameters:
  arch: &arch-params
    - amd64
    - arm64
  compiler: &compiler-params
    - any
    - cranelift
    - llvm

workflows:
  build:
    jobs:
      - build-api:
          matrix:
            parameters:
              arch: *arch-params
      - build-controller:
          matrix:
            parameters:
              arch: *arch-params
              compiler: *compiler-params
      - build-animation:
          matrix:
            parameters:
              animation:
                - rainbow
                - simple
      - package-os:
          matrix:
            parameters:
              arch: *arch-params
              compiler: *compiler-params
              kind:
                - deb
                - rpm
          requires:
            - build-api-<< matrix.arch >>
            - build-controller-<< matrix.arch >>-<< matrix.compiler >>
