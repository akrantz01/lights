// Code generated by capnpc-go. DO NOT EDIT.

package lights

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type Color struct{ capnp.Struct }

// Color_TypeID is the unique identifier for the type Color.
const Color_TypeID = 0xb3f078772ec8e414

func NewColor(s *capnp.Segment) (Color, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Color{st}, err
}

func NewRootColor(s *capnp.Segment) (Color, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Color{st}, err
}

func ReadRootColor(msg *capnp.Message) (Color, error) {
	root, err := msg.Root()
	return Color{root.Struct()}, err
}

func (s Color) String() string {
	str, _ := text.Marshal(0xb3f078772ec8e414, s.Struct)
	return str
}

func (s Color) R() uint8 {
	return s.Struct.Uint8(0)
}

func (s Color) SetR(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Color) G() uint8 {
	return s.Struct.Uint8(1)
}

func (s Color) SetG(v uint8) {
	s.Struct.SetUint8(1, v)
}

func (s Color) B() uint8 {
	return s.Struct.Uint8(2)
}

func (s Color) SetB(v uint8) {
	s.Struct.SetUint8(2, v)
}

// Color_List is a list of Color.
type Color_List struct{ capnp.List }

// NewColor creates a new list of Color.
func NewColor_List(s *capnp.Segment, sz int32) (Color_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Color_List{l}, err
}

func (s Color_List) At(i int) Color { return Color{s.List.Struct(i)} }

func (s Color_List) Set(i int, v Color) error { return s.List.SetStruct(i, v.Struct) }

func (s Color_List) String() string {
	str, _ := text.MarshalList(0xb3f078772ec8e414, s.List)
	return str
}

// Color_Future is a wrapper for a Color promised by a client call.
type Color_Future struct{ *capnp.Future }

func (p Color_Future) Struct() (Color, error) {
	s, err := p.Future.Struct()
	return Color{s}, err
}

type Position struct{ capnp.Struct }
type Position_range Position
type Position_Which uint16

const (
	Position_Which_single Position_Which = 0
	Position_Which_range  Position_Which = 1
	Position_Which_list   Position_Which = 2
)

func (w Position_Which) String() string {
	const s = "singlerangelist"
	switch w {
	case Position_Which_single:
		return s[0:6]
	case Position_Which_range:
		return s[6:11]
	case Position_Which_list:
		return s[11:15]

	}
	return "Position_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Position_TypeID is the unique identifier for the type Position.
const Position_TypeID = 0x918e03b05c690a3b

func NewPosition(s *capnp.Segment) (Position, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Position{st}, err
}

func NewRootPosition(s *capnp.Segment) (Position, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Position{st}, err
}

func ReadRootPosition(msg *capnp.Message) (Position, error) {
	root, err := msg.Root()
	return Position{root.Struct()}, err
}

func (s Position) String() string {
	str, _ := text.Marshal(0x918e03b05c690a3b, s.Struct)
	return str
}

func (s Position) Which() Position_Which {
	return Position_Which(s.Struct.Uint16(2))
}
func (s Position) Single() uint16 {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != single")
	}
	return s.Struct.Uint16(0)
}

func (s Position) SetSingle(v uint16) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint16(0, v)
}

func (s Position) Range() Position_range { return Position_range(s) }

func (s Position) SetRange() {
	s.Struct.SetUint16(2, 1)
}

func (s Position_range) Start() uint16 {
	return s.Struct.Uint16(0)
}

func (s Position_range) SetStart(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s Position_range) End() uint16 {
	return s.Struct.Uint16(4)
}

func (s Position_range) SetEnd(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s Position) List() (capnp.UInt16List, error) {
	if s.Struct.Uint16(2) != 2 {
		panic("Which() != list")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.UInt16List{List: p.List()}, err
}

func (s Position) HasList() bool {
	if s.Struct.Uint16(2) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Position) SetList(v capnp.UInt16List) error {
	s.Struct.SetUint16(2, 2)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewList sets the list field to a newly
// allocated capnp.UInt16List, preferring placement in s's segment.
func (s Position) NewList(n int32) (capnp.UInt16List, error) {
	s.Struct.SetUint16(2, 2)
	l, err := capnp.NewUInt16List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt16List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Position_List is a list of Position.
type Position_List struct{ capnp.List }

// NewPosition creates a new list of Position.
func NewPosition_List(s *capnp.Segment, sz int32) (Position_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Position_List{l}, err
}

func (s Position_List) At(i int) Position { return Position{s.List.Struct(i)} }

func (s Position_List) Set(i int, v Position) error { return s.List.SetStruct(i, v.Struct) }

func (s Position_List) String() string {
	str, _ := text.MarshalList(0x918e03b05c690a3b, s.List)
	return str
}

// Position_Future is a wrapper for a Position promised by a client call.
type Position_Future struct{ *capnp.Future }

func (p Position_Future) Struct() (Position, error) {
	s, err := p.Future.Struct()
	return Position{s}, err
}

func (p Position_Future) Range() Position_range_Future { return Position_range_Future{p.Future} }

// Position_range_Future is a wrapper for a Position_range promised by a client call.
type Position_range_Future struct{ *capnp.Future }

func (p Position_range_Future) Struct() (Position_range, error) {
	s, err := p.Future.Struct()
	return Position_range{s}, err
}

type Mode uint16

// Mode_TypeID is the unique identifier for the type Mode.
const Mode_TypeID = 0xdf03095de4d6a4a3

// Values of Mode.
const (
	Mode_queue   Mode = 0
	Mode_instant Mode = 1
)

// String returns the enum's constant name.
func (c Mode) String() string {
	switch c {
	case Mode_queue:
		return "queue"
	case Mode_instant:
		return "instant"

	default:
		return ""
	}
}

// ModeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ModeFromString(c string) Mode {
	switch c {
	case "queue":
		return Mode_queue
	case "instant":
		return Mode_instant

	default:
		return 0
	}
}

type Mode_List struct{ capnp.List }

func NewMode_List(s *capnp.Segment, sz int32) (Mode_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Mode_List{l.List}, err
}

func (l Mode_List) At(i int) Mode {
	ul := capnp.UInt16List{List: l.List}
	return Mode(ul.At(i))
}

func (l Mode_List) Set(i int, v Mode) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type LightController struct{ Client *capnp.Client }

// LightController_TypeID is the unique identifier for the type LightController.
const LightController_TypeID = 0xb169ce07794d2b2f

func (c LightController) Set(ctx context.Context, params func(LightController_set_Params) error) (LightController_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      0,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_set_Results_Future{Future: ans.Future()}, release
}
func (c LightController) Fill(ctx context.Context, params func(LightController_fill_Params) error) (LightController_fill_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      1,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "fill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_fill_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_fill_Results_Future{Future: ans.Future()}, release
}
func (c LightController) Brightness(ctx context.Context, params func(LightController_brightness_Params) error) (LightController_brightness_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      2,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "brightness",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_brightness_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_brightness_Results_Future{Future: ans.Future()}, release
}
func (c LightController) Mode(ctx context.Context, params func(LightController_mode_Params) error) (LightController_mode_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      3,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "mode",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_mode_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_mode_Results_Future{Future: ans.Future()}, release
}
func (c LightController) Show(ctx context.Context, params func(LightController_show_Params) error) (LightController_show_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      4,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "show",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_show_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_show_Results_Future{Future: ans.Future()}, release
}

func (c LightController) AddRef() LightController {
	return LightController{
		Client: c.Client.AddRef(),
	}
}

func (c LightController) Release() {
	c.Client.Release()
}

// A LightController_Server is a LightController with a local implementation.
type LightController_Server interface {
	Set(context.Context, LightController_set) error

	Fill(context.Context, LightController_fill) error

	Brightness(context.Context, LightController_brightness) error

	Mode(context.Context, LightController_mode) error

	Show(context.Context, LightController_show) error
}

// LightController_NewServer creates a new Server from an implementation of LightController_Server.
func LightController_NewServer(s LightController_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(LightController_Methods(nil, s), s, c, policy)
}

// LightController_ServerToClient creates a new Client from an implementation of LightController_Server.
// The caller is responsible for calling Release on the returned Client.
func LightController_ServerToClient(s LightController_Server, policy *server.Policy) LightController {
	return LightController{Client: capnp.NewClient(LightController_NewServer(s, policy))}
}

// LightController_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func LightController_Methods(methods []server.Method, s LightController_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      0,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, LightController_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      1,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "fill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Fill(ctx, LightController_fill{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      2,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "brightness",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Brightness(ctx, LightController_brightness{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      3,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "mode",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mode(ctx, LightController_mode{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      4,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "show",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Show(ctx, LightController_show{call})
		},
	})

	return methods
}

// LightController_set holds the state for a server call to LightController.set.
// See server.Call for documentation.
type LightController_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_set) Args() LightController_set_Params {
	return LightController_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_set) AllocResults() (LightController_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_set_Results{Struct: r}, err
}

// LightController_fill holds the state for a server call to LightController.fill.
// See server.Call for documentation.
type LightController_fill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_fill) Args() LightController_fill_Params {
	return LightController_fill_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_fill) AllocResults() (LightController_fill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_fill_Results{Struct: r}, err
}

// LightController_brightness holds the state for a server call to LightController.brightness.
// See server.Call for documentation.
type LightController_brightness struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_brightness) Args() LightController_brightness_Params {
	return LightController_brightness_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_brightness) AllocResults() (LightController_brightness_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_brightness_Results{Struct: r}, err
}

// LightController_mode holds the state for a server call to LightController.mode.
// See server.Call for documentation.
type LightController_mode struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_mode) Args() LightController_mode_Params {
	return LightController_mode_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_mode) AllocResults() (LightController_mode_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_mode_Results{Struct: r}, err
}

// LightController_show holds the state for a server call to LightController.show.
// See server.Call for documentation.
type LightController_show struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_show) Args() LightController_show_Params {
	return LightController_show_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_show) AllocResults() (LightController_show_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_show_Results{Struct: r}, err
}

type LightController_set_Params struct{ capnp.Struct }

// LightController_set_Params_TypeID is the unique identifier for the type LightController_set_Params.
const LightController_set_Params_TypeID = 0xe46b95066deca16c

func NewLightController_set_Params(s *capnp.Segment) (LightController_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LightController_set_Params{st}, err
}

func NewRootLightController_set_Params(s *capnp.Segment) (LightController_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LightController_set_Params{st}, err
}

func ReadRootLightController_set_Params(msg *capnp.Message) (LightController_set_Params, error) {
	root, err := msg.Root()
	return LightController_set_Params{root.Struct()}, err
}

func (s LightController_set_Params) String() string {
	str, _ := text.Marshal(0xe46b95066deca16c, s.Struct)
	return str
}

func (s LightController_set_Params) Position() (Position, error) {
	p, err := s.Struct.Ptr(0)
	return Position{Struct: p.Struct()}, err
}

func (s LightController_set_Params) HasPosition() bool {
	return s.Struct.HasPtr(0)
}

func (s LightController_set_Params) SetPosition(v Position) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Position struct, preferring placement in s's segment.
func (s LightController_set_Params) NewPosition() (Position, error) {
	ss, err := NewPosition(s.Struct.Segment())
	if err != nil {
		return Position{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s LightController_set_Params) Color() (Color, error) {
	p, err := s.Struct.Ptr(1)
	return Color{Struct: p.Struct()}, err
}

func (s LightController_set_Params) HasColor() bool {
	return s.Struct.HasPtr(1)
}

func (s LightController_set_Params) SetColor(v Color) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewColor sets the color field to a newly
// allocated Color struct, preferring placement in s's segment.
func (s LightController_set_Params) NewColor() (Color, error) {
	ss, err := NewColor(s.Struct.Segment())
	if err != nil {
		return Color{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// LightController_set_Params_List is a list of LightController_set_Params.
type LightController_set_Params_List struct{ capnp.List }

// NewLightController_set_Params creates a new list of LightController_set_Params.
func NewLightController_set_Params_List(s *capnp.Segment, sz int32) (LightController_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LightController_set_Params_List{l}, err
}

func (s LightController_set_Params_List) At(i int) LightController_set_Params {
	return LightController_set_Params{s.List.Struct(i)}
}

func (s LightController_set_Params_List) Set(i int, v LightController_set_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_set_Params_List) String() string {
	str, _ := text.MarshalList(0xe46b95066deca16c, s.List)
	return str
}

// LightController_set_Params_Future is a wrapper for a LightController_set_Params promised by a client call.
type LightController_set_Params_Future struct{ *capnp.Future }

func (p LightController_set_Params_Future) Struct() (LightController_set_Params, error) {
	s, err := p.Future.Struct()
	return LightController_set_Params{s}, err
}

func (p LightController_set_Params_Future) Position() Position_Future {
	return Position_Future{Future: p.Future.Field(0, nil)}
}

func (p LightController_set_Params_Future) Color() Color_Future {
	return Color_Future{Future: p.Future.Field(1, nil)}
}

type LightController_set_Results struct{ capnp.Struct }

// LightController_set_Results_TypeID is the unique identifier for the type LightController_set_Results.
const LightController_set_Results_TypeID = 0x80b73bae50b117f8

func NewLightController_set_Results(s *capnp.Segment) (LightController_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_set_Results{st}, err
}

func NewRootLightController_set_Results(s *capnp.Segment) (LightController_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_set_Results{st}, err
}

func ReadRootLightController_set_Results(msg *capnp.Message) (LightController_set_Results, error) {
	root, err := msg.Root()
	return LightController_set_Results{root.Struct()}, err
}

func (s LightController_set_Results) String() string {
	str, _ := text.Marshal(0x80b73bae50b117f8, s.Struct)
	return str
}

// LightController_set_Results_List is a list of LightController_set_Results.
type LightController_set_Results_List struct{ capnp.List }

// NewLightController_set_Results creates a new list of LightController_set_Results.
func NewLightController_set_Results_List(s *capnp.Segment, sz int32) (LightController_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_set_Results_List{l}, err
}

func (s LightController_set_Results_List) At(i int) LightController_set_Results {
	return LightController_set_Results{s.List.Struct(i)}
}

func (s LightController_set_Results_List) Set(i int, v LightController_set_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_set_Results_List) String() string {
	str, _ := text.MarshalList(0x80b73bae50b117f8, s.List)
	return str
}

// LightController_set_Results_Future is a wrapper for a LightController_set_Results promised by a client call.
type LightController_set_Results_Future struct{ *capnp.Future }

func (p LightController_set_Results_Future) Struct() (LightController_set_Results, error) {
	s, err := p.Future.Struct()
	return LightController_set_Results{s}, err
}

type LightController_fill_Params struct{ capnp.Struct }

// LightController_fill_Params_TypeID is the unique identifier for the type LightController_fill_Params.
const LightController_fill_Params_TypeID = 0xe93244cfb7f0d3ba

func NewLightController_fill_Params(s *capnp.Segment) (LightController_fill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LightController_fill_Params{st}, err
}

func NewRootLightController_fill_Params(s *capnp.Segment) (LightController_fill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LightController_fill_Params{st}, err
}

func ReadRootLightController_fill_Params(msg *capnp.Message) (LightController_fill_Params, error) {
	root, err := msg.Root()
	return LightController_fill_Params{root.Struct()}, err
}

func (s LightController_fill_Params) String() string {
	str, _ := text.Marshal(0xe93244cfb7f0d3ba, s.Struct)
	return str
}

func (s LightController_fill_Params) Color() (Color, error) {
	p, err := s.Struct.Ptr(0)
	return Color{Struct: p.Struct()}, err
}

func (s LightController_fill_Params) HasColor() bool {
	return s.Struct.HasPtr(0)
}

func (s LightController_fill_Params) SetColor(v Color) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewColor sets the color field to a newly
// allocated Color struct, preferring placement in s's segment.
func (s LightController_fill_Params) NewColor() (Color, error) {
	ss, err := NewColor(s.Struct.Segment())
	if err != nil {
		return Color{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// LightController_fill_Params_List is a list of LightController_fill_Params.
type LightController_fill_Params_List struct{ capnp.List }

// NewLightController_fill_Params creates a new list of LightController_fill_Params.
func NewLightController_fill_Params_List(s *capnp.Segment, sz int32) (LightController_fill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return LightController_fill_Params_List{l}, err
}

func (s LightController_fill_Params_List) At(i int) LightController_fill_Params {
	return LightController_fill_Params{s.List.Struct(i)}
}

func (s LightController_fill_Params_List) Set(i int, v LightController_fill_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_fill_Params_List) String() string {
	str, _ := text.MarshalList(0xe93244cfb7f0d3ba, s.List)
	return str
}

// LightController_fill_Params_Future is a wrapper for a LightController_fill_Params promised by a client call.
type LightController_fill_Params_Future struct{ *capnp.Future }

func (p LightController_fill_Params_Future) Struct() (LightController_fill_Params, error) {
	s, err := p.Future.Struct()
	return LightController_fill_Params{s}, err
}

func (p LightController_fill_Params_Future) Color() Color_Future {
	return Color_Future{Future: p.Future.Field(0, nil)}
}

type LightController_fill_Results struct{ capnp.Struct }

// LightController_fill_Results_TypeID is the unique identifier for the type LightController_fill_Results.
const LightController_fill_Results_TypeID = 0xd62175b492ee4332

func NewLightController_fill_Results(s *capnp.Segment) (LightController_fill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_fill_Results{st}, err
}

func NewRootLightController_fill_Results(s *capnp.Segment) (LightController_fill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_fill_Results{st}, err
}

func ReadRootLightController_fill_Results(msg *capnp.Message) (LightController_fill_Results, error) {
	root, err := msg.Root()
	return LightController_fill_Results{root.Struct()}, err
}

func (s LightController_fill_Results) String() string {
	str, _ := text.Marshal(0xd62175b492ee4332, s.Struct)
	return str
}

// LightController_fill_Results_List is a list of LightController_fill_Results.
type LightController_fill_Results_List struct{ capnp.List }

// NewLightController_fill_Results creates a new list of LightController_fill_Results.
func NewLightController_fill_Results_List(s *capnp.Segment, sz int32) (LightController_fill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_fill_Results_List{l}, err
}

func (s LightController_fill_Results_List) At(i int) LightController_fill_Results {
	return LightController_fill_Results{s.List.Struct(i)}
}

func (s LightController_fill_Results_List) Set(i int, v LightController_fill_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_fill_Results_List) String() string {
	str, _ := text.MarshalList(0xd62175b492ee4332, s.List)
	return str
}

// LightController_fill_Results_Future is a wrapper for a LightController_fill_Results promised by a client call.
type LightController_fill_Results_Future struct{ *capnp.Future }

func (p LightController_fill_Results_Future) Struct() (LightController_fill_Results, error) {
	s, err := p.Future.Struct()
	return LightController_fill_Results{s}, err
}

type LightController_brightness_Params struct{ capnp.Struct }

// LightController_brightness_Params_TypeID is the unique identifier for the type LightController_brightness_Params.
const LightController_brightness_Params_TypeID = 0x813357de5bbe6ce0

func NewLightController_brightness_Params(s *capnp.Segment) (LightController_brightness_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LightController_brightness_Params{st}, err
}

func NewRootLightController_brightness_Params(s *capnp.Segment) (LightController_brightness_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LightController_brightness_Params{st}, err
}

func ReadRootLightController_brightness_Params(msg *capnp.Message) (LightController_brightness_Params, error) {
	root, err := msg.Root()
	return LightController_brightness_Params{root.Struct()}, err
}

func (s LightController_brightness_Params) String() string {
	str, _ := text.Marshal(0x813357de5bbe6ce0, s.Struct)
	return str
}

func (s LightController_brightness_Params) Level() uint8 {
	return s.Struct.Uint8(0)
}

func (s LightController_brightness_Params) SetLevel(v uint8) {
	s.Struct.SetUint8(0, v)
}

// LightController_brightness_Params_List is a list of LightController_brightness_Params.
type LightController_brightness_Params_List struct{ capnp.List }

// NewLightController_brightness_Params creates a new list of LightController_brightness_Params.
func NewLightController_brightness_Params_List(s *capnp.Segment, sz int32) (LightController_brightness_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return LightController_brightness_Params_List{l}, err
}

func (s LightController_brightness_Params_List) At(i int) LightController_brightness_Params {
	return LightController_brightness_Params{s.List.Struct(i)}
}

func (s LightController_brightness_Params_List) Set(i int, v LightController_brightness_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_brightness_Params_List) String() string {
	str, _ := text.MarshalList(0x813357de5bbe6ce0, s.List)
	return str
}

// LightController_brightness_Params_Future is a wrapper for a LightController_brightness_Params promised by a client call.
type LightController_brightness_Params_Future struct{ *capnp.Future }

func (p LightController_brightness_Params_Future) Struct() (LightController_brightness_Params, error) {
	s, err := p.Future.Struct()
	return LightController_brightness_Params{s}, err
}

type LightController_brightness_Results struct{ capnp.Struct }

// LightController_brightness_Results_TypeID is the unique identifier for the type LightController_brightness_Results.
const LightController_brightness_Results_TypeID = 0x806a8662cb3ccd55

func NewLightController_brightness_Results(s *capnp.Segment) (LightController_brightness_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_brightness_Results{st}, err
}

func NewRootLightController_brightness_Results(s *capnp.Segment) (LightController_brightness_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_brightness_Results{st}, err
}

func ReadRootLightController_brightness_Results(msg *capnp.Message) (LightController_brightness_Results, error) {
	root, err := msg.Root()
	return LightController_brightness_Results{root.Struct()}, err
}

func (s LightController_brightness_Results) String() string {
	str, _ := text.Marshal(0x806a8662cb3ccd55, s.Struct)
	return str
}

// LightController_brightness_Results_List is a list of LightController_brightness_Results.
type LightController_brightness_Results_List struct{ capnp.List }

// NewLightController_brightness_Results creates a new list of LightController_brightness_Results.
func NewLightController_brightness_Results_List(s *capnp.Segment, sz int32) (LightController_brightness_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_brightness_Results_List{l}, err
}

func (s LightController_brightness_Results_List) At(i int) LightController_brightness_Results {
	return LightController_brightness_Results{s.List.Struct(i)}
}

func (s LightController_brightness_Results_List) Set(i int, v LightController_brightness_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_brightness_Results_List) String() string {
	str, _ := text.MarshalList(0x806a8662cb3ccd55, s.List)
	return str
}

// LightController_brightness_Results_Future is a wrapper for a LightController_brightness_Results promised by a client call.
type LightController_brightness_Results_Future struct{ *capnp.Future }

func (p LightController_brightness_Results_Future) Struct() (LightController_brightness_Results, error) {
	s, err := p.Future.Struct()
	return LightController_brightness_Results{s}, err
}

type LightController_mode_Params struct{ capnp.Struct }

// LightController_mode_Params_TypeID is the unique identifier for the type LightController_mode_Params.
const LightController_mode_Params_TypeID = 0xa6d53b2857f5de47

func NewLightController_mode_Params(s *capnp.Segment) (LightController_mode_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LightController_mode_Params{st}, err
}

func NewRootLightController_mode_Params(s *capnp.Segment) (LightController_mode_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LightController_mode_Params{st}, err
}

func ReadRootLightController_mode_Params(msg *capnp.Message) (LightController_mode_Params, error) {
	root, err := msg.Root()
	return LightController_mode_Params{root.Struct()}, err
}

func (s LightController_mode_Params) String() string {
	str, _ := text.Marshal(0xa6d53b2857f5de47, s.Struct)
	return str
}

func (s LightController_mode_Params) Mode() Mode {
	return Mode(s.Struct.Uint16(0))
}

func (s LightController_mode_Params) SetMode(v Mode) {
	s.Struct.SetUint16(0, uint16(v))
}

// LightController_mode_Params_List is a list of LightController_mode_Params.
type LightController_mode_Params_List struct{ capnp.List }

// NewLightController_mode_Params creates a new list of LightController_mode_Params.
func NewLightController_mode_Params_List(s *capnp.Segment, sz int32) (LightController_mode_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return LightController_mode_Params_List{l}, err
}

func (s LightController_mode_Params_List) At(i int) LightController_mode_Params {
	return LightController_mode_Params{s.List.Struct(i)}
}

func (s LightController_mode_Params_List) Set(i int, v LightController_mode_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_mode_Params_List) String() string {
	str, _ := text.MarshalList(0xa6d53b2857f5de47, s.List)
	return str
}

// LightController_mode_Params_Future is a wrapper for a LightController_mode_Params promised by a client call.
type LightController_mode_Params_Future struct{ *capnp.Future }

func (p LightController_mode_Params_Future) Struct() (LightController_mode_Params, error) {
	s, err := p.Future.Struct()
	return LightController_mode_Params{s}, err
}

type LightController_mode_Results struct{ capnp.Struct }

// LightController_mode_Results_TypeID is the unique identifier for the type LightController_mode_Results.
const LightController_mode_Results_TypeID = 0xcc11a9f70519ba80

func NewLightController_mode_Results(s *capnp.Segment) (LightController_mode_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_mode_Results{st}, err
}

func NewRootLightController_mode_Results(s *capnp.Segment) (LightController_mode_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_mode_Results{st}, err
}

func ReadRootLightController_mode_Results(msg *capnp.Message) (LightController_mode_Results, error) {
	root, err := msg.Root()
	return LightController_mode_Results{root.Struct()}, err
}

func (s LightController_mode_Results) String() string {
	str, _ := text.Marshal(0xcc11a9f70519ba80, s.Struct)
	return str
}

// LightController_mode_Results_List is a list of LightController_mode_Results.
type LightController_mode_Results_List struct{ capnp.List }

// NewLightController_mode_Results creates a new list of LightController_mode_Results.
func NewLightController_mode_Results_List(s *capnp.Segment, sz int32) (LightController_mode_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_mode_Results_List{l}, err
}

func (s LightController_mode_Results_List) At(i int) LightController_mode_Results {
	return LightController_mode_Results{s.List.Struct(i)}
}

func (s LightController_mode_Results_List) Set(i int, v LightController_mode_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_mode_Results_List) String() string {
	str, _ := text.MarshalList(0xcc11a9f70519ba80, s.List)
	return str
}

// LightController_mode_Results_Future is a wrapper for a LightController_mode_Results promised by a client call.
type LightController_mode_Results_Future struct{ *capnp.Future }

func (p LightController_mode_Results_Future) Struct() (LightController_mode_Results, error) {
	s, err := p.Future.Struct()
	return LightController_mode_Results{s}, err
}

type LightController_show_Params struct{ capnp.Struct }

// LightController_show_Params_TypeID is the unique identifier for the type LightController_show_Params.
const LightController_show_Params_TypeID = 0xa482971bef67617a

func NewLightController_show_Params(s *capnp.Segment) (LightController_show_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_show_Params{st}, err
}

func NewRootLightController_show_Params(s *capnp.Segment) (LightController_show_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_show_Params{st}, err
}

func ReadRootLightController_show_Params(msg *capnp.Message) (LightController_show_Params, error) {
	root, err := msg.Root()
	return LightController_show_Params{root.Struct()}, err
}

func (s LightController_show_Params) String() string {
	str, _ := text.Marshal(0xa482971bef67617a, s.Struct)
	return str
}

// LightController_show_Params_List is a list of LightController_show_Params.
type LightController_show_Params_List struct{ capnp.List }

// NewLightController_show_Params creates a new list of LightController_show_Params.
func NewLightController_show_Params_List(s *capnp.Segment, sz int32) (LightController_show_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_show_Params_List{l}, err
}

func (s LightController_show_Params_List) At(i int) LightController_show_Params {
	return LightController_show_Params{s.List.Struct(i)}
}

func (s LightController_show_Params_List) Set(i int, v LightController_show_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_show_Params_List) String() string {
	str, _ := text.MarshalList(0xa482971bef67617a, s.List)
	return str
}

// LightController_show_Params_Future is a wrapper for a LightController_show_Params promised by a client call.
type LightController_show_Params_Future struct{ *capnp.Future }

func (p LightController_show_Params_Future) Struct() (LightController_show_Params, error) {
	s, err := p.Future.Struct()
	return LightController_show_Params{s}, err
}

type LightController_show_Results struct{ capnp.Struct }

// LightController_show_Results_TypeID is the unique identifier for the type LightController_show_Results.
const LightController_show_Results_TypeID = 0x832efb95fcd6f26a

func NewLightController_show_Results(s *capnp.Segment) (LightController_show_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_show_Results{st}, err
}

func NewRootLightController_show_Results(s *capnp.Segment) (LightController_show_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_show_Results{st}, err
}

func ReadRootLightController_show_Results(msg *capnp.Message) (LightController_show_Results, error) {
	root, err := msg.Root()
	return LightController_show_Results{root.Struct()}, err
}

func (s LightController_show_Results) String() string {
	str, _ := text.Marshal(0x832efb95fcd6f26a, s.Struct)
	return str
}

// LightController_show_Results_List is a list of LightController_show_Results.
type LightController_show_Results_List struct{ capnp.List }

// NewLightController_show_Results creates a new list of LightController_show_Results.
func NewLightController_show_Results_List(s *capnp.Segment, sz int32) (LightController_show_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_show_Results_List{l}, err
}

func (s LightController_show_Results_List) At(i int) LightController_show_Results {
	return LightController_show_Results{s.List.Struct(i)}
}

func (s LightController_show_Results_List) Set(i int, v LightController_show_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_show_Results_List) String() string {
	str, _ := text.MarshalList(0x832efb95fcd6f26a, s.List)
	return str
}

// LightController_show_Results_Future is a wrapper for a LightController_show_Results promised by a client call.
type LightController_show_Results_Future struct{ *capnp.Future }

func (p LightController_show_Results_Future) Struct() (LightController_show_Results, error) {
	s, err := p.Future.Struct()
	return LightController_show_Results{s}, err
}

const schema_d91d0c9586c33e4f = "x\xda\x9cU]h\x1cU\x14>\xdf\xbd3;\x89$" +
	"\xdd\\g\x8b\x18\x91\xa55\x85&\x9a\xb4\xd9X\x94D" +
	"\xcc\xc64\xf4\x87,\xee\x04\xa5\xf8\x87L\x92q\xbbu" +
	"v&\xceL\x8c\xf1A\xabb\x1f\x95\x0aA|,\xb6" +
	"B}P\xe3\x0f\xc5`}\xf1E\xd1\xa8 \x06|\xa9" +
	"\"yQ\xfc)\x82(\x9a:rgwv\xa6\x8d\xb5" +
	"l\xdf\xee\xdcs\xcf=\xdf\xf9\xcew\xbf\xd9]dE" +
	"6\xa8\xbe\x98!2&\xd5Lx\xef\xea\x1d\x9fN\x1f" +
	";r\x94D\x1f\x88\x14\x8dh\xa8\x9f\xff\x08R\xc2?" +
	"\xaf[.\xbf1r&\x1d\xd9\xc6\xdf\x96\x91\xef\xec\x0f" +
	"\x1f8wh\xe8\x192\xfa\x10\x87\x04\xff\x1e\x04}\x07" +
	"\x1f%\x84G~[\xdbX\xfa{\xe0\xb9T\xea\x04_" +
	"\x91\xa9#\xd7T\x1f|\x8b\xbfp\x9c\x8cn \xbc\xfb" +
	"\xce\x8f\x8e-u\xdc\xf8\x0dM@\xe3\xc0\xd0\x1e\xde\x0d" +
	"}\x82kD\xfa\x18\x7f\x93\x10>iV~\xbd\xe1\xe5" +
	"gO\xa6.Z\xadc\xd8w\xee\xf7C;G\xbe~" +
	"-\x8d\xe1\xac\x0cA_\x8d0\xec\xba\xb9\xb4\xa8}^" +
	"]&\xd1\xcd\x93B\x84\xa1\x9f\xf9\x14tD\x09\x17\xf8" +
	">\xe8\x9f\xc8e\x98[\xffx`\xe1\x89\xf3\xef\\\x02" +
	",:\xb6\xac0\xe8g\xe5R\x7f_\x91\xb0\x8e\xae\\" +
	"\xaf\xfeqZ|\x96\x82e\xa8Q\x7fO-~\xb0\xd1" +
	"\xfe\xe5\xc6*\x197\x01I\xb7[\xa1\x81hhL=" +
	"(\x01\x96\xd4\x05BX\x18\xff\xe5\xa5w\xe7\xb7\xad\xa5" +
	".9]\xbf\xe4\xd5\x93k\xeb\x0f\xb5\xf3oIt\xb3" +
	"4t\xfd\x15\xf5/\xfd\x94*q\x9cPo#\x84\xf6" +
	"\x89\x9fj\x99\xa5G\xd7\xebW\xa8L\xdeqJ}]" +
	"\xd6x/\xaa\xb1\xf2\xd5\xf93_\xec-\xfc\xd08\x00" +
	"y`k&biGf\x94\xfaC\xbbZ9\x1c\xf8" +
	"\x0f\xcfd\xcc9gnW\xfdk`F~\x0cO\xca" +
	"\x8fq\xd7\x09<\xd7\xb6-o`\xda\x93\x1b\x8e\xe5\xfb" +
	"=S\x96\x9f\x9d\xb7\x03\xbf\x99\xae^9\xdd\xb7\x82\x9e" +
	")+\xef_\x94\xd7Z\xd9\xb2\xe9if\xcd7\x14\xae" +
	"\x10) \x12\x9d\x05\"\xa3\x8d\xc3\xc81\xe4m\xebq" +
	"\xcbF\x86\x182\x92\x9b\x16\xa0\x1dv\x17z\xa6F\xad" +
	"\x8b\xb1\xf1\xcd\x89e\xd7\xaf\x06U\xee:e\xc0\xe8\xe0" +
	"JG\x18F0&\x86\x89\x8c\"\x871\xc9\xd0\x89\x7f" +
	"B \x11\x828P \xd6\xc9.\x849p\"1\xd8" +
	"Gd\xdc\xc2a\xecg\x18\xf5\xabN\xc5\xb6\xa0\x11\x83" +
	"F\xc8{\xa6S\xb1\xb2v\xd5\x0f\xb0\x85P\xe6\x88\"" +
	"[\xae\xa2\x99r\xde\xf4\xccZK\xf3\xa9\xb9\xb3V\x9c" +
	"\x97f\xb8/a8+\xcf \x9b\xe8\x93\x80l\x0a\x9d" +
	"r\xa5*\xf0$q9\xae\x125\xb5\x8b\xd8g\xc4\xf1" +
	"\xed\xc4\xc4\xf3\x1a\x12\xd9\"~#b\xb1\x8f\x98\xa8i" +
	"`M\xf3A\xec\\\xc2\xbc\x9f\x98\xb8O\x03o\x9a\x02" +
	"\xe2\x07*J2oL\x83\xd2\xb4\x12\xc4\xe6$\xf6\xc8" +
	"X\xaf\xa6\xf9VPD\xf6\x91\xaam\x17\x11\xc6r#" +
	"\xee\xfb\xc5z\xc7Ed%\xa9E\x94\x81\xffS\xc7\xb8" +
	"k\xbb\x1e5\xa4\xd1\xa0o\xe2\xdaD\x19\x02\xc8I\xaf" +
	"\x12\x07\xe4\xe6^\x0e\xa3\xcc \x18\xcb\x81\x11\x89\x92\xdc" +
	"\xdc\xcfa\xdc\xc3\x00/\x961*\xcd\xd5\xf4\xd5H;" +
	"\x9a\xea&i+\x97\x93\xb6\xeb\x0cD\"\x8cf\xae\x10" +
	"\xd5\xf1\xf6\xcaW\xd6\xc3a\xec\x96M4\xf0\xf6o'" +
	"2vr\x18\xb72\xe4\xfd\xc0\xf4\x82X\xc7\x9a\xe5\xcc" +
	"\xc6\xebV\xb0\xca\x09l\xc6\xca.M\x1c\x9d\x1b.\xb9" +
	"\xb3\x96\xe4\xb9-B\"\x0aR\x88\xa2\xfd.\xa2\xfcc" +
	"\xf3\xd6\xbc\xf5t\xd5\xf1\x03\xd3\x09Z\xb5\xa7\xb2\x99\x8d" +
	"\xd4\xdf\xd6\x1c_\xef\xc1\xa4\xc9\xe6\xf8\x06\x0b\x8d'|" +
	";C8\xd7\xe0\x8d\x88\xd0\x95\x18>\x01]\x84\xfc\x8c" +
	"\x94\x04\xba\x92\xbfK}\xbfeV\xfe\xe3]\xa6\x9d\xef" +
	"2e\xfe\x0d\x00\x00\xff\xffU^S\xe7"

func init() {
	schemas.Register(schema_d91d0c9586c33e4f,
		0x806a8662cb3ccd55,
		0x80b73bae50b117f8,
		0x813357de5bbe6ce0,
		0x832efb95fcd6f26a,
		0x918e03b05c690a3b,
		0xa482971bef67617a,
		0xa6d53b2857f5de47,
		0xb169ce07794d2b2f,
		0xb3f078772ec8e414,
		0xcc11a9f70519ba80,
		0xcdfcd009fcbc797e,
		0xd62175b492ee4332,
		0xdf03095de4d6a4a3,
		0xe46b95066deca16c,
		0xe93244cfb7f0d3ba)
}
