// Code generated by capnpc-go. DO NOT EDIT.

package lights

import (
	context "context"
	strconv "strconv"

	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
)

type Color struct{ capnp.Struct }

// Color_TypeID is the unique identifier for the type Color.
const Color_TypeID = 0xb3f078772ec8e414

func NewColor(s *capnp.Segment) (Color, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Color{st}, err
}

func NewRootColor(s *capnp.Segment) (Color, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Color{st}, err
}

func ReadRootColor(msg *capnp.Message) (Color, error) {
	root, err := msg.Root()
	return Color{root.Struct()}, err
}

func (s Color) String() string {
	str, _ := text.Marshal(0xb3f078772ec8e414, s.Struct)
	return str
}

func (s Color) R() uint8 {
	return s.Struct.Uint8(0)
}

func (s Color) SetR(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Color) G() uint8 {
	return s.Struct.Uint8(1)
}

func (s Color) SetG(v uint8) {
	s.Struct.SetUint8(1, v)
}

func (s Color) B() uint8 {
	return s.Struct.Uint8(2)
}

func (s Color) SetB(v uint8) {
	s.Struct.SetUint8(2, v)
}

// Color_List is a list of Color.
type Color_List struct{ capnp.List }

// NewColor creates a new list of Color.
func NewColor_List(s *capnp.Segment, sz int32) (Color_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Color_List{l}, err
}

func (s Color_List) At(i int) Color { return Color{s.List.Struct(i)} }

func (s Color_List) Set(i int, v Color) error { return s.List.SetStruct(i, v.Struct) }

func (s Color_List) String() string {
	str, _ := text.MarshalList(0xb3f078772ec8e414, s.List)
	return str
}

// Color_Future is a wrapper for a Color promised by a client call.
type Color_Future struct{ *capnp.Future }

func (p Color_Future) Struct() (Color, error) {
	s, err := p.Future.Struct()
	return Color{s}, err
}

type Position struct{ capnp.Struct }
type Position_range Position
type Position_Which uint16

const (
	Position_Which_single Position_Which = 0
	Position_Which_range  Position_Which = 1
	Position_Which_list   Position_Which = 2
)

func (w Position_Which) String() string {
	const s = "singlerangelist"
	switch w {
	case Position_Which_single:
		return s[0:6]
	case Position_Which_range:
		return s[6:11]
	case Position_Which_list:
		return s[11:15]

	}
	return "Position_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Position_TypeID is the unique identifier for the type Position.
const Position_TypeID = 0x918e03b05c690a3b

func NewPosition(s *capnp.Segment) (Position, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Position{st}, err
}

func NewRootPosition(s *capnp.Segment) (Position, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Position{st}, err
}

func ReadRootPosition(msg *capnp.Message) (Position, error) {
	root, err := msg.Root()
	return Position{root.Struct()}, err
}

func (s Position) String() string {
	str, _ := text.Marshal(0x918e03b05c690a3b, s.Struct)
	return str
}

func (s Position) Which() Position_Which {
	return Position_Which(s.Struct.Uint16(2))
}
func (s Position) Single() uint16 {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != single")
	}
	return s.Struct.Uint16(0)
}

func (s Position) SetSingle(v uint16) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint16(0, v)
}

func (s Position) Range() Position_range { return Position_range(s) }

func (s Position) SetRange() {
	s.Struct.SetUint16(2, 1)
}

func (s Position_range) Start() uint16 {
	return s.Struct.Uint16(0)
}

func (s Position_range) SetStart(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s Position_range) End() uint16 {
	return s.Struct.Uint16(4)
}

func (s Position_range) SetEnd(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s Position) List() (capnp.UInt16List, error) {
	if s.Struct.Uint16(2) != 2 {
		panic("Which() != list")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.UInt16List{List: p.List()}, err
}

func (s Position) HasList() bool {
	if s.Struct.Uint16(2) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Position) SetList(v capnp.UInt16List) error {
	s.Struct.SetUint16(2, 2)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewList sets the list field to a newly
// allocated capnp.UInt16List, preferring placement in s's segment.
func (s Position) NewList(n int32) (capnp.UInt16List, error) {
	s.Struct.SetUint16(2, 2)
	l, err := capnp.NewUInt16List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt16List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Position_List is a list of Position.
type Position_List struct{ capnp.List }

// NewPosition creates a new list of Position.
func NewPosition_List(s *capnp.Segment, sz int32) (Position_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Position_List{l}, err
}

func (s Position_List) At(i int) Position { return Position{s.List.Struct(i)} }

func (s Position_List) Set(i int, v Position) error { return s.List.SetStruct(i, v.Struct) }

func (s Position_List) String() string {
	str, _ := text.MarshalList(0x918e03b05c690a3b, s.List)
	return str
}

// Position_Future is a wrapper for a Position promised by a client call.
type Position_Future struct{ *capnp.Future }

func (p Position_Future) Struct() (Position, error) {
	s, err := p.Future.Struct()
	return Position{s}, err
}

func (p Position_Future) Range() Position_range_Future { return Position_range_Future{p.Future} }

// Position_range_Future is a wrapper for a Position_range promised by a client call.
type Position_range_Future struct{ *capnp.Future }

func (p Position_range_Future) Struct() (Position_range, error) {
	s, err := p.Future.Struct()
	return Position_range{s}, err
}

type Mode uint16

// Mode_TypeID is the unique identifier for the type Mode.
const Mode_TypeID = 0xdf03095de4d6a4a3

// Values of Mode.
const (
	Mode_queue   Mode = 0
	Mode_instant Mode = 1
)

// String returns the enum's constant name.
func (c Mode) String() string {
	switch c {
	case Mode_queue:
		return "queue"
	case Mode_instant:
		return "instant"

	default:
		return ""
	}
}

// ModeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ModeFromString(c string) Mode {
	switch c {
	case "queue":
		return Mode_queue
	case "instant":
		return Mode_instant

	default:
		return 0
	}
}

type Mode_List struct{ capnp.List }

func NewMode_List(s *capnp.Segment, sz int32) (Mode_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Mode_List{l.List}, err
}

func (l Mode_List) At(i int) Mode {
	ul := capnp.UInt16List{List: l.List}
	return Mode(ul.At(i))
}

func (l Mode_List) Set(i int, v Mode) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type LightController struct{ Client *capnp.Client }

// LightController_TypeID is the unique identifier for the type LightController.
const LightController_TypeID = 0xb169ce07794d2b2f

func (c LightController) Set(ctx context.Context, params func(LightController_set_Params) error) (LightController_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      0,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_set_Results_Future{Future: ans.Future()}, release
}
func (c LightController) Fill(ctx context.Context, params func(LightController_fill_Params) error) (LightController_fill_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      1,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "fill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_fill_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_fill_Results_Future{Future: ans.Future()}, release
}
func (c LightController) Brightness(ctx context.Context, params func(LightController_brightness_Params) error) (LightController_brightness_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      2,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "brightness",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_brightness_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_brightness_Results_Future{Future: ans.Future()}, release
}
func (c LightController) Mode(ctx context.Context, params func(LightController_mode_Params) error) (LightController_mode_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      3,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "mode",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_mode_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_mode_Results_Future{Future: ans.Future()}, release
}
func (c LightController) Show(ctx context.Context, params func(LightController_show_Params) error) (LightController_show_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      4,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "show",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_show_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_show_Results_Future{Future: ans.Future()}, release
}
func (c LightController) SetAll(ctx context.Context, params func(LightController_setAll_Params) error) (LightController_setAll_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      5,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "setAll",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LightController_setAll_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return LightController_setAll_Results_Future{Future: ans.Future()}, release
}

func (c LightController) AddRef() LightController {
	return LightController{
		Client: c.Client.AddRef(),
	}
}

func (c LightController) Release() {
	c.Client.Release()
}

// A LightController_Server is a LightController with a local implementation.
type LightController_Server interface {
	Set(context.Context, LightController_set) error

	Fill(context.Context, LightController_fill) error

	Brightness(context.Context, LightController_brightness) error

	Mode(context.Context, LightController_mode) error

	Show(context.Context, LightController_show) error

	SetAll(context.Context, LightController_setAll) error
}

// LightController_NewServer creates a new Server from an implementation of LightController_Server.
func LightController_NewServer(s LightController_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(LightController_Methods(nil, s), s, c, policy)
}

// LightController_ServerToClient creates a new Client from an implementation of LightController_Server.
// The caller is responsible for calling Release on the returned Client.
func LightController_ServerToClient(s LightController_Server, policy *server.Policy) LightController {
	return LightController{Client: capnp.NewClient(LightController_NewServer(s, policy))}
}

// LightController_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func LightController_Methods(methods []server.Method, s LightController_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      0,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, LightController_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      1,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "fill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Fill(ctx, LightController_fill{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      2,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "brightness",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Brightness(ctx, LightController_brightness{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      3,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "mode",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mode(ctx, LightController_mode{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      4,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "show",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Show(ctx, LightController_show{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb169ce07794d2b2f,
			MethodID:      5,
			InterfaceName: "lights_capnp/lights.capnp:LightController",
			MethodName:    "setAll",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetAll(ctx, LightController_setAll{call})
		},
	})

	return methods
}

// LightController_set holds the state for a server call to LightController.set.
// See server.Call for documentation.
type LightController_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_set) Args() LightController_set_Params {
	return LightController_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_set) AllocResults() (LightController_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_set_Results{Struct: r}, err
}

// LightController_fill holds the state for a server call to LightController.fill.
// See server.Call for documentation.
type LightController_fill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_fill) Args() LightController_fill_Params {
	return LightController_fill_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_fill) AllocResults() (LightController_fill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_fill_Results{Struct: r}, err
}

// LightController_brightness holds the state for a server call to LightController.brightness.
// See server.Call for documentation.
type LightController_brightness struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_brightness) Args() LightController_brightness_Params {
	return LightController_brightness_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_brightness) AllocResults() (LightController_brightness_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_brightness_Results{Struct: r}, err
}

// LightController_mode holds the state for a server call to LightController.mode.
// See server.Call for documentation.
type LightController_mode struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_mode) Args() LightController_mode_Params {
	return LightController_mode_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_mode) AllocResults() (LightController_mode_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_mode_Results{Struct: r}, err
}

// LightController_show holds the state for a server call to LightController.show.
// See server.Call for documentation.
type LightController_show struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_show) Args() LightController_show_Params {
	return LightController_show_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_show) AllocResults() (LightController_show_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_show_Results{Struct: r}, err
}

// LightController_setAll holds the state for a server call to LightController.setAll.
// See server.Call for documentation.
type LightController_setAll struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LightController_setAll) Args() LightController_setAll_Params {
	return LightController_setAll_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c LightController_setAll) AllocResults() (LightController_setAll_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_setAll_Results{Struct: r}, err
}

type LightController_set_Params struct{ capnp.Struct }

// LightController_set_Params_TypeID is the unique identifier for the type LightController_set_Params.
const LightController_set_Params_TypeID = 0xe46b95066deca16c

func NewLightController_set_Params(s *capnp.Segment) (LightController_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LightController_set_Params{st}, err
}

func NewRootLightController_set_Params(s *capnp.Segment) (LightController_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LightController_set_Params{st}, err
}

func ReadRootLightController_set_Params(msg *capnp.Message) (LightController_set_Params, error) {
	root, err := msg.Root()
	return LightController_set_Params{root.Struct()}, err
}

func (s LightController_set_Params) String() string {
	str, _ := text.Marshal(0xe46b95066deca16c, s.Struct)
	return str
}

func (s LightController_set_Params) Position() (Position, error) {
	p, err := s.Struct.Ptr(0)
	return Position{Struct: p.Struct()}, err
}

func (s LightController_set_Params) HasPosition() bool {
	return s.Struct.HasPtr(0)
}

func (s LightController_set_Params) SetPosition(v Position) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Position struct, preferring placement in s's segment.
func (s LightController_set_Params) NewPosition() (Position, error) {
	ss, err := NewPosition(s.Struct.Segment())
	if err != nil {
		return Position{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s LightController_set_Params) Color() (Color, error) {
	p, err := s.Struct.Ptr(1)
	return Color{Struct: p.Struct()}, err
}

func (s LightController_set_Params) HasColor() bool {
	return s.Struct.HasPtr(1)
}

func (s LightController_set_Params) SetColor(v Color) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewColor sets the color field to a newly
// allocated Color struct, preferring placement in s's segment.
func (s LightController_set_Params) NewColor() (Color, error) {
	ss, err := NewColor(s.Struct.Segment())
	if err != nil {
		return Color{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// LightController_set_Params_List is a list of LightController_set_Params.
type LightController_set_Params_List struct{ capnp.List }

// NewLightController_set_Params creates a new list of LightController_set_Params.
func NewLightController_set_Params_List(s *capnp.Segment, sz int32) (LightController_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LightController_set_Params_List{l}, err
}

func (s LightController_set_Params_List) At(i int) LightController_set_Params {
	return LightController_set_Params{s.List.Struct(i)}
}

func (s LightController_set_Params_List) Set(i int, v LightController_set_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_set_Params_List) String() string {
	str, _ := text.MarshalList(0xe46b95066deca16c, s.List)
	return str
}

// LightController_set_Params_Future is a wrapper for a LightController_set_Params promised by a client call.
type LightController_set_Params_Future struct{ *capnp.Future }

func (p LightController_set_Params_Future) Struct() (LightController_set_Params, error) {
	s, err := p.Future.Struct()
	return LightController_set_Params{s}, err
}

func (p LightController_set_Params_Future) Position() Position_Future {
	return Position_Future{Future: p.Future.Field(0, nil)}
}

func (p LightController_set_Params_Future) Color() Color_Future {
	return Color_Future{Future: p.Future.Field(1, nil)}
}

type LightController_set_Results struct{ capnp.Struct }

// LightController_set_Results_TypeID is the unique identifier for the type LightController_set_Results.
const LightController_set_Results_TypeID = 0x80b73bae50b117f8

func NewLightController_set_Results(s *capnp.Segment) (LightController_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_set_Results{st}, err
}

func NewRootLightController_set_Results(s *capnp.Segment) (LightController_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_set_Results{st}, err
}

func ReadRootLightController_set_Results(msg *capnp.Message) (LightController_set_Results, error) {
	root, err := msg.Root()
	return LightController_set_Results{root.Struct()}, err
}

func (s LightController_set_Results) String() string {
	str, _ := text.Marshal(0x80b73bae50b117f8, s.Struct)
	return str
}

// LightController_set_Results_List is a list of LightController_set_Results.
type LightController_set_Results_List struct{ capnp.List }

// NewLightController_set_Results creates a new list of LightController_set_Results.
func NewLightController_set_Results_List(s *capnp.Segment, sz int32) (LightController_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_set_Results_List{l}, err
}

func (s LightController_set_Results_List) At(i int) LightController_set_Results {
	return LightController_set_Results{s.List.Struct(i)}
}

func (s LightController_set_Results_List) Set(i int, v LightController_set_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_set_Results_List) String() string {
	str, _ := text.MarshalList(0x80b73bae50b117f8, s.List)
	return str
}

// LightController_set_Results_Future is a wrapper for a LightController_set_Results promised by a client call.
type LightController_set_Results_Future struct{ *capnp.Future }

func (p LightController_set_Results_Future) Struct() (LightController_set_Results, error) {
	s, err := p.Future.Struct()
	return LightController_set_Results{s}, err
}

type LightController_fill_Params struct{ capnp.Struct }

// LightController_fill_Params_TypeID is the unique identifier for the type LightController_fill_Params.
const LightController_fill_Params_TypeID = 0xe93244cfb7f0d3ba

func NewLightController_fill_Params(s *capnp.Segment) (LightController_fill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LightController_fill_Params{st}, err
}

func NewRootLightController_fill_Params(s *capnp.Segment) (LightController_fill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LightController_fill_Params{st}, err
}

func ReadRootLightController_fill_Params(msg *capnp.Message) (LightController_fill_Params, error) {
	root, err := msg.Root()
	return LightController_fill_Params{root.Struct()}, err
}

func (s LightController_fill_Params) String() string {
	str, _ := text.Marshal(0xe93244cfb7f0d3ba, s.Struct)
	return str
}

func (s LightController_fill_Params) Color() (Color, error) {
	p, err := s.Struct.Ptr(0)
	return Color{Struct: p.Struct()}, err
}

func (s LightController_fill_Params) HasColor() bool {
	return s.Struct.HasPtr(0)
}

func (s LightController_fill_Params) SetColor(v Color) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewColor sets the color field to a newly
// allocated Color struct, preferring placement in s's segment.
func (s LightController_fill_Params) NewColor() (Color, error) {
	ss, err := NewColor(s.Struct.Segment())
	if err != nil {
		return Color{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// LightController_fill_Params_List is a list of LightController_fill_Params.
type LightController_fill_Params_List struct{ capnp.List }

// NewLightController_fill_Params creates a new list of LightController_fill_Params.
func NewLightController_fill_Params_List(s *capnp.Segment, sz int32) (LightController_fill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return LightController_fill_Params_List{l}, err
}

func (s LightController_fill_Params_List) At(i int) LightController_fill_Params {
	return LightController_fill_Params{s.List.Struct(i)}
}

func (s LightController_fill_Params_List) Set(i int, v LightController_fill_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_fill_Params_List) String() string {
	str, _ := text.MarshalList(0xe93244cfb7f0d3ba, s.List)
	return str
}

// LightController_fill_Params_Future is a wrapper for a LightController_fill_Params promised by a client call.
type LightController_fill_Params_Future struct{ *capnp.Future }

func (p LightController_fill_Params_Future) Struct() (LightController_fill_Params, error) {
	s, err := p.Future.Struct()
	return LightController_fill_Params{s}, err
}

func (p LightController_fill_Params_Future) Color() Color_Future {
	return Color_Future{Future: p.Future.Field(0, nil)}
}

type LightController_fill_Results struct{ capnp.Struct }

// LightController_fill_Results_TypeID is the unique identifier for the type LightController_fill_Results.
const LightController_fill_Results_TypeID = 0xd62175b492ee4332

func NewLightController_fill_Results(s *capnp.Segment) (LightController_fill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_fill_Results{st}, err
}

func NewRootLightController_fill_Results(s *capnp.Segment) (LightController_fill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_fill_Results{st}, err
}

func ReadRootLightController_fill_Results(msg *capnp.Message) (LightController_fill_Results, error) {
	root, err := msg.Root()
	return LightController_fill_Results{root.Struct()}, err
}

func (s LightController_fill_Results) String() string {
	str, _ := text.Marshal(0xd62175b492ee4332, s.Struct)
	return str
}

// LightController_fill_Results_List is a list of LightController_fill_Results.
type LightController_fill_Results_List struct{ capnp.List }

// NewLightController_fill_Results creates a new list of LightController_fill_Results.
func NewLightController_fill_Results_List(s *capnp.Segment, sz int32) (LightController_fill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_fill_Results_List{l}, err
}

func (s LightController_fill_Results_List) At(i int) LightController_fill_Results {
	return LightController_fill_Results{s.List.Struct(i)}
}

func (s LightController_fill_Results_List) Set(i int, v LightController_fill_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_fill_Results_List) String() string {
	str, _ := text.MarshalList(0xd62175b492ee4332, s.List)
	return str
}

// LightController_fill_Results_Future is a wrapper for a LightController_fill_Results promised by a client call.
type LightController_fill_Results_Future struct{ *capnp.Future }

func (p LightController_fill_Results_Future) Struct() (LightController_fill_Results, error) {
	s, err := p.Future.Struct()
	return LightController_fill_Results{s}, err
}

type LightController_brightness_Params struct{ capnp.Struct }

// LightController_brightness_Params_TypeID is the unique identifier for the type LightController_brightness_Params.
const LightController_brightness_Params_TypeID = 0x813357de5bbe6ce0

func NewLightController_brightness_Params(s *capnp.Segment) (LightController_brightness_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LightController_brightness_Params{st}, err
}

func NewRootLightController_brightness_Params(s *capnp.Segment) (LightController_brightness_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LightController_brightness_Params{st}, err
}

func ReadRootLightController_brightness_Params(msg *capnp.Message) (LightController_brightness_Params, error) {
	root, err := msg.Root()
	return LightController_brightness_Params{root.Struct()}, err
}

func (s LightController_brightness_Params) String() string {
	str, _ := text.Marshal(0x813357de5bbe6ce0, s.Struct)
	return str
}

func (s LightController_brightness_Params) Level() uint8 {
	return s.Struct.Uint8(0)
}

func (s LightController_brightness_Params) SetLevel(v uint8) {
	s.Struct.SetUint8(0, v)
}

// LightController_brightness_Params_List is a list of LightController_brightness_Params.
type LightController_brightness_Params_List struct{ capnp.List }

// NewLightController_brightness_Params creates a new list of LightController_brightness_Params.
func NewLightController_brightness_Params_List(s *capnp.Segment, sz int32) (LightController_brightness_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return LightController_brightness_Params_List{l}, err
}

func (s LightController_brightness_Params_List) At(i int) LightController_brightness_Params {
	return LightController_brightness_Params{s.List.Struct(i)}
}

func (s LightController_brightness_Params_List) Set(i int, v LightController_brightness_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_brightness_Params_List) String() string {
	str, _ := text.MarshalList(0x813357de5bbe6ce0, s.List)
	return str
}

// LightController_brightness_Params_Future is a wrapper for a LightController_brightness_Params promised by a client call.
type LightController_brightness_Params_Future struct{ *capnp.Future }

func (p LightController_brightness_Params_Future) Struct() (LightController_brightness_Params, error) {
	s, err := p.Future.Struct()
	return LightController_brightness_Params{s}, err
}

type LightController_brightness_Results struct{ capnp.Struct }

// LightController_brightness_Results_TypeID is the unique identifier for the type LightController_brightness_Results.
const LightController_brightness_Results_TypeID = 0x806a8662cb3ccd55

func NewLightController_brightness_Results(s *capnp.Segment) (LightController_brightness_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_brightness_Results{st}, err
}

func NewRootLightController_brightness_Results(s *capnp.Segment) (LightController_brightness_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_brightness_Results{st}, err
}

func ReadRootLightController_brightness_Results(msg *capnp.Message) (LightController_brightness_Results, error) {
	root, err := msg.Root()
	return LightController_brightness_Results{root.Struct()}, err
}

func (s LightController_brightness_Results) String() string {
	str, _ := text.Marshal(0x806a8662cb3ccd55, s.Struct)
	return str
}

// LightController_brightness_Results_List is a list of LightController_brightness_Results.
type LightController_brightness_Results_List struct{ capnp.List }

// NewLightController_brightness_Results creates a new list of LightController_brightness_Results.
func NewLightController_brightness_Results_List(s *capnp.Segment, sz int32) (LightController_brightness_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_brightness_Results_List{l}, err
}

func (s LightController_brightness_Results_List) At(i int) LightController_brightness_Results {
	return LightController_brightness_Results{s.List.Struct(i)}
}

func (s LightController_brightness_Results_List) Set(i int, v LightController_brightness_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_brightness_Results_List) String() string {
	str, _ := text.MarshalList(0x806a8662cb3ccd55, s.List)
	return str
}

// LightController_brightness_Results_Future is a wrapper for a LightController_brightness_Results promised by a client call.
type LightController_brightness_Results_Future struct{ *capnp.Future }

func (p LightController_brightness_Results_Future) Struct() (LightController_brightness_Results, error) {
	s, err := p.Future.Struct()
	return LightController_brightness_Results{s}, err
}

type LightController_mode_Params struct{ capnp.Struct }

// LightController_mode_Params_TypeID is the unique identifier for the type LightController_mode_Params.
const LightController_mode_Params_TypeID = 0xa6d53b2857f5de47

func NewLightController_mode_Params(s *capnp.Segment) (LightController_mode_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LightController_mode_Params{st}, err
}

func NewRootLightController_mode_Params(s *capnp.Segment) (LightController_mode_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LightController_mode_Params{st}, err
}

func ReadRootLightController_mode_Params(msg *capnp.Message) (LightController_mode_Params, error) {
	root, err := msg.Root()
	return LightController_mode_Params{root.Struct()}, err
}

func (s LightController_mode_Params) String() string {
	str, _ := text.Marshal(0xa6d53b2857f5de47, s.Struct)
	return str
}

func (s LightController_mode_Params) Mode() Mode {
	return Mode(s.Struct.Uint16(0))
}

func (s LightController_mode_Params) SetMode(v Mode) {
	s.Struct.SetUint16(0, uint16(v))
}

// LightController_mode_Params_List is a list of LightController_mode_Params.
type LightController_mode_Params_List struct{ capnp.List }

// NewLightController_mode_Params creates a new list of LightController_mode_Params.
func NewLightController_mode_Params_List(s *capnp.Segment, sz int32) (LightController_mode_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return LightController_mode_Params_List{l}, err
}

func (s LightController_mode_Params_List) At(i int) LightController_mode_Params {
	return LightController_mode_Params{s.List.Struct(i)}
}

func (s LightController_mode_Params_List) Set(i int, v LightController_mode_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_mode_Params_List) String() string {
	str, _ := text.MarshalList(0xa6d53b2857f5de47, s.List)
	return str
}

// LightController_mode_Params_Future is a wrapper for a LightController_mode_Params promised by a client call.
type LightController_mode_Params_Future struct{ *capnp.Future }

func (p LightController_mode_Params_Future) Struct() (LightController_mode_Params, error) {
	s, err := p.Future.Struct()
	return LightController_mode_Params{s}, err
}

type LightController_mode_Results struct{ capnp.Struct }

// LightController_mode_Results_TypeID is the unique identifier for the type LightController_mode_Results.
const LightController_mode_Results_TypeID = 0xcc11a9f70519ba80

func NewLightController_mode_Results(s *capnp.Segment) (LightController_mode_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_mode_Results{st}, err
}

func NewRootLightController_mode_Results(s *capnp.Segment) (LightController_mode_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_mode_Results{st}, err
}

func ReadRootLightController_mode_Results(msg *capnp.Message) (LightController_mode_Results, error) {
	root, err := msg.Root()
	return LightController_mode_Results{root.Struct()}, err
}

func (s LightController_mode_Results) String() string {
	str, _ := text.Marshal(0xcc11a9f70519ba80, s.Struct)
	return str
}

// LightController_mode_Results_List is a list of LightController_mode_Results.
type LightController_mode_Results_List struct{ capnp.List }

// NewLightController_mode_Results creates a new list of LightController_mode_Results.
func NewLightController_mode_Results_List(s *capnp.Segment, sz int32) (LightController_mode_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_mode_Results_List{l}, err
}

func (s LightController_mode_Results_List) At(i int) LightController_mode_Results {
	return LightController_mode_Results{s.List.Struct(i)}
}

func (s LightController_mode_Results_List) Set(i int, v LightController_mode_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_mode_Results_List) String() string {
	str, _ := text.MarshalList(0xcc11a9f70519ba80, s.List)
	return str
}

// LightController_mode_Results_Future is a wrapper for a LightController_mode_Results promised by a client call.
type LightController_mode_Results_Future struct{ *capnp.Future }

func (p LightController_mode_Results_Future) Struct() (LightController_mode_Results, error) {
	s, err := p.Future.Struct()
	return LightController_mode_Results{s}, err
}

type LightController_show_Params struct{ capnp.Struct }

// LightController_show_Params_TypeID is the unique identifier for the type LightController_show_Params.
const LightController_show_Params_TypeID = 0xa482971bef67617a

func NewLightController_show_Params(s *capnp.Segment) (LightController_show_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_show_Params{st}, err
}

func NewRootLightController_show_Params(s *capnp.Segment) (LightController_show_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_show_Params{st}, err
}

func ReadRootLightController_show_Params(msg *capnp.Message) (LightController_show_Params, error) {
	root, err := msg.Root()
	return LightController_show_Params{root.Struct()}, err
}

func (s LightController_show_Params) String() string {
	str, _ := text.Marshal(0xa482971bef67617a, s.Struct)
	return str
}

// LightController_show_Params_List is a list of LightController_show_Params.
type LightController_show_Params_List struct{ capnp.List }

// NewLightController_show_Params creates a new list of LightController_show_Params.
func NewLightController_show_Params_List(s *capnp.Segment, sz int32) (LightController_show_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_show_Params_List{l}, err
}

func (s LightController_show_Params_List) At(i int) LightController_show_Params {
	return LightController_show_Params{s.List.Struct(i)}
}

func (s LightController_show_Params_List) Set(i int, v LightController_show_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_show_Params_List) String() string {
	str, _ := text.MarshalList(0xa482971bef67617a, s.List)
	return str
}

// LightController_show_Params_Future is a wrapper for a LightController_show_Params promised by a client call.
type LightController_show_Params_Future struct{ *capnp.Future }

func (p LightController_show_Params_Future) Struct() (LightController_show_Params, error) {
	s, err := p.Future.Struct()
	return LightController_show_Params{s}, err
}

type LightController_show_Results struct{ capnp.Struct }

// LightController_show_Results_TypeID is the unique identifier for the type LightController_show_Results.
const LightController_show_Results_TypeID = 0x832efb95fcd6f26a

func NewLightController_show_Results(s *capnp.Segment) (LightController_show_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_show_Results{st}, err
}

func NewRootLightController_show_Results(s *capnp.Segment) (LightController_show_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_show_Results{st}, err
}

func ReadRootLightController_show_Results(msg *capnp.Message) (LightController_show_Results, error) {
	root, err := msg.Root()
	return LightController_show_Results{root.Struct()}, err
}

func (s LightController_show_Results) String() string {
	str, _ := text.Marshal(0x832efb95fcd6f26a, s.Struct)
	return str
}

// LightController_show_Results_List is a list of LightController_show_Results.
type LightController_show_Results_List struct{ capnp.List }

// NewLightController_show_Results creates a new list of LightController_show_Results.
func NewLightController_show_Results_List(s *capnp.Segment, sz int32) (LightController_show_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_show_Results_List{l}, err
}

func (s LightController_show_Results_List) At(i int) LightController_show_Results {
	return LightController_show_Results{s.List.Struct(i)}
}

func (s LightController_show_Results_List) Set(i int, v LightController_show_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_show_Results_List) String() string {
	str, _ := text.MarshalList(0x832efb95fcd6f26a, s.List)
	return str
}

// LightController_show_Results_Future is a wrapper for a LightController_show_Results promised by a client call.
type LightController_show_Results_Future struct{ *capnp.Future }

func (p LightController_show_Results_Future) Struct() (LightController_show_Results, error) {
	s, err := p.Future.Struct()
	return LightController_show_Results{s}, err
}

type LightController_setAll_Params struct{ capnp.Struct }

// LightController_setAll_Params_TypeID is the unique identifier for the type LightController_setAll_Params.
const LightController_setAll_Params_TypeID = 0xfe9f6757811fca23

func NewLightController_setAll_Params(s *capnp.Segment) (LightController_setAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LightController_setAll_Params{st}, err
}

func NewRootLightController_setAll_Params(s *capnp.Segment) (LightController_setAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LightController_setAll_Params{st}, err
}

func ReadRootLightController_setAll_Params(msg *capnp.Message) (LightController_setAll_Params, error) {
	root, err := msg.Root()
	return LightController_setAll_Params{root.Struct()}, err
}

func (s LightController_setAll_Params) String() string {
	str, _ := text.Marshal(0xfe9f6757811fca23, s.Struct)
	return str
}

func (s LightController_setAll_Params) Colors() (Color_List, error) {
	p, err := s.Struct.Ptr(0)
	return Color_List{List: p.List()}, err
}

func (s LightController_setAll_Params) HasColors() bool {
	return s.Struct.HasPtr(0)
}

func (s LightController_setAll_Params) SetColors(v Color_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewColors sets the colors field to a newly
// allocated Color_List, preferring placement in s's segment.
func (s LightController_setAll_Params) NewColors(n int32) (Color_List, error) {
	l, err := NewColor_List(s.Struct.Segment(), n)
	if err != nil {
		return Color_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// LightController_setAll_Params_List is a list of LightController_setAll_Params.
type LightController_setAll_Params_List struct{ capnp.List }

// NewLightController_setAll_Params creates a new list of LightController_setAll_Params.
func NewLightController_setAll_Params_List(s *capnp.Segment, sz int32) (LightController_setAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return LightController_setAll_Params_List{l}, err
}

func (s LightController_setAll_Params_List) At(i int) LightController_setAll_Params {
	return LightController_setAll_Params{s.List.Struct(i)}
}

func (s LightController_setAll_Params_List) Set(i int, v LightController_setAll_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_setAll_Params_List) String() string {
	str, _ := text.MarshalList(0xfe9f6757811fca23, s.List)
	return str
}

// LightController_setAll_Params_Future is a wrapper for a LightController_setAll_Params promised by a client call.
type LightController_setAll_Params_Future struct{ *capnp.Future }

func (p LightController_setAll_Params_Future) Struct() (LightController_setAll_Params, error) {
	s, err := p.Future.Struct()
	return LightController_setAll_Params{s}, err
}

type LightController_setAll_Results struct{ capnp.Struct }

// LightController_setAll_Results_TypeID is the unique identifier for the type LightController_setAll_Results.
const LightController_setAll_Results_TypeID = 0x8d8b9bdeab971ab3

func NewLightController_setAll_Results(s *capnp.Segment) (LightController_setAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_setAll_Results{st}, err
}

func NewRootLightController_setAll_Results(s *capnp.Segment) (LightController_setAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LightController_setAll_Results{st}, err
}

func ReadRootLightController_setAll_Results(msg *capnp.Message) (LightController_setAll_Results, error) {
	root, err := msg.Root()
	return LightController_setAll_Results{root.Struct()}, err
}

func (s LightController_setAll_Results) String() string {
	str, _ := text.Marshal(0x8d8b9bdeab971ab3, s.Struct)
	return str
}

// LightController_setAll_Results_List is a list of LightController_setAll_Results.
type LightController_setAll_Results_List struct{ capnp.List }

// NewLightController_setAll_Results creates a new list of LightController_setAll_Results.
func NewLightController_setAll_Results_List(s *capnp.Segment, sz int32) (LightController_setAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LightController_setAll_Results_List{l}, err
}

func (s LightController_setAll_Results_List) At(i int) LightController_setAll_Results {
	return LightController_setAll_Results{s.List.Struct(i)}
}

func (s LightController_setAll_Results_List) Set(i int, v LightController_setAll_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s LightController_setAll_Results_List) String() string {
	str, _ := text.MarshalList(0x8d8b9bdeab971ab3, s.List)
	return str
}

// LightController_setAll_Results_Future is a wrapper for a LightController_setAll_Results promised by a client call.
type LightController_setAll_Results_Future struct{ *capnp.Future }

func (p LightController_setAll_Results_Future) Struct() (LightController_setAll_Results, error) {
	s, err := p.Future.Struct()
	return LightController_setAll_Results{s}, err
}

const schema_d91d0c9586c33e4f = "x\xda\x9cUoh\x1c\xd5\x17\xbd\xe7\xbd\xf9\x93\xfcH" +
	"\xb2y\xbfM\xd1D\xcab\x1b\xa1\x89&m6\x82\x9a" +
	"Xw5\x0d6\xa5\xc1\x9d\xd0\x12\xf0\x0f2I\xc6\xed" +
	"\xd6\xc9n\x9c\x99\x18#\xa8\x8d\xc5\x8aH\x84\x0a\xa1\x14" +
	"\x11\x11\xab\xa0\x82\x1a\xab\x14\x83\x08*\x82V\xab\x82\x18" +
	"\xf0K\x14\xc9\x17E\xb4\x08\xa2h\xec\xc8\x9b\xdd\xd9\x99" +
	"6j\xdc~\xdby\xf7\xdew\xcf;\xf7\xdc\xb3;\x0e" +
	"\xb3,\xebQ3:\x91\xb1O\xd5\xfc\xfdg\xae\xffx" +
	"\xec\xc8\xc1C$:A\xa4\xe8D\xbd\x8f\xf0\xefA\x8a" +
	"\xff\xdb%\x8b\xb9W\xfaO\xc5#\xb3\xfcu\x19\xf9\xc6" +
	"~\xe7\xb6\x95\xd1\xde92:\x11\x86\x0a\xfc[\x10\x92" +
	"\x0f\xf0\x0c\xc1?\xf8\xf3\xf2\xda\xc2\x1f\xdd\x87c\xa5O" +
	"\xf3%Yz\xb2\xed\xd8\xcb+O=>\x1f\x8b\xcc\xf3" +
	"\xd32\xd2\xff\xbf\xc2\xed\xaf\xf1'\x8e\x92\xd1\x06\xf8\xb7" +
	"\xdc\xf0\xfe\x91\x85\x86\xcd_\xd1 t\x0e\xf4\xce\xf16" +
	"$\x8fr\x9d(9\xcf_%\xf8\xf7\x9b\xf9\x9f.;" +
	"\xf6\xf0\x89\xd8E\xadJ\x80\xee\xe6\x95_F\xb7\xf5\x7f" +
	"\xf9B\x1c]\xbd\x0c!\xd9\xaaHt\xdb\xaf\x1c\x9e\xd5" +
	"?-,\x92h\xe3Q#B\xefu\xca\x08\x92\xc3A" +
	"\xc1\x90\xf2(\x92;U\x9d\xc8oY\xfd\xb0{\xe6\xbe" +
	"\xb3'/\x00\x16\xa4]\xa12${dZ\xb2K\x95" +
	"\xb0\x0e-\xb5\xaa\xbf\xbe(>\x89\xc1\xfa@\x0d^\xfe" +
	"\xe0\xec\xdbk\xf5\x9f\xaf\x9d!c+\x10\xbdv\x13t" +
	"\x10\xf5\xbe\xa9\xee\x91\x00\xdfUg\x08~z\xe0\xc7'" +
	"\xdf\x98\xbe|9v\xc9f-\xb8\xe4\xb9\x13\xcb\xabw" +
	"\xd4\xf3\xafI\xb4\xb18\xf4d\xa3\xf6{\xb2U\x938" +
	"6i\xd7\x10|\xfb\xd9\x1f&\xb5\x85\xbbW\xcbW\xa8" +
	",\xe0G{I\xf6\xe8\xd0d\x8f\xa5/\xce\x9e\xfal" +
	"W\xfa\xbbJ\x02d\xc2cZ\xc0\xd2qM\xb2\xb4\xf5" +
	"tjn4\xff\xcc\xb9x\xc2[\xda{2\xe1#-" +
	"C]\xbe]\xc8\x1f\xf0\xdc;\xc75s\xaa8\xb5\xbd" +
	"\xfc\xd5=.?\xfa\xf6\xca\x8f\x81R\xd1sJ\xb6m" +
	"9\xddc\x8e<(Z\xae\xdb>b\xb9\x89i\xdbs" +
	"\xab\xe5\xea\xc6\xe5\xae\xe5\xb5\x8fX)\xf7\xbc\xba\xda\xda" +
	"\xe6LG7']C\xe1\x0a\x91\x02\"\xd1\x98&2" +
	"\xea8\x8c\x16\x86\x94m\xddk\xd9\xd0\x88A\x93\xe4\xd5" +
	"\x00\xed@i\xa6}$c\xd5\x8c\xcd\xb5\xbc\x1bm[" +
	"\xd2!+\x89\xaa\xb5|}m\xae\xe4\x16\xbc\x02/\x15" +
	"s\x80\xd1\xc0\x95\x06\xdf\x0f\x9e0\xd8Gdd9\x8c" +
	"\xbd\x0c\x8d8\xe7\x03\x91\xca\xc4P\x9aX#\xfb\xd3o" +
	"\x01'\x12=\x9dD\xc6U\x1c\xc6n\x86\x8c[(\xe6" +
	"m\x0b:1\xe8\x84\x94c\x16\xf3V\xc2.\xb8\x1e\x9a" +
	"\x089\x8e \xd2t\x11D\xe4R\xa6cN\xd64\xdb" +
	"\xc9\xd2\x84\x15\xd6\xc5\xa7\xd3\x19M'!s\x90\x88\xc4" +
	"O@\"\x86N\xd9\xa8\x0b\x1cI\xdc\xa5\\\x954W" +
	"\x16\x03\xa1\xbd\x89\xc5-\xc4\xc4\xf3:\xa2\x9d@\xb8\x80" +
	"\xe2x'11\xaf\x83U=\x0f\xa1a\x8a\xb9[\x89" +
	"\x89Y\x1d\xbc\xea8\x08\xb7_L\xca:S\x87R\xf5" +
	")\x84\x9e(\xf6\xcb\xd8\x90\x0e\xb5\xbab\x08]Q\xec" +
	"\xec#&zt\xdd\xb5\xbc,\x12w\x15l;\x0b?" +
	"\x941q\xd7\xcd\x96\xd9\xc8\"!\x09\xcf\"S\xd6Q" +
	"\x169\xe0\xdf$4P\xb2K\x0eU\xf4S\xe1x\xf0" +
	"\xff\x91|\x04\xd0\"\xddR\x0c\xc9\xc3]\x1cF\x8eA" +
	"0\xd6\x02F$\x86\xe5\xe1n\x0ec\x1f\x03\x9cpO" +
	"\x90\xaf\xfe\x1a\xbb\x98\xdd\x09F\xbfnw\x94\x7f\xd2\x7f" +
	"\xa9\xd8\x1d(5\x10\x86BT\xc6\xdb!\xd7\xb8\x9d\xc3" +
	"\xd8!\x1fQ\xc1\xdb\xb5\x85\xc8\xd8\xc6a\\\xcd\x90r" +
	"=\xd3\xf1B\xb1\xebVq\"\xfc]\x0bV9\x8a\xf5" +
	"X\xd9\x85\x85\x99\xa9\xbe\xe1\xd2\x84%y\xae\x0b\x90\x88" +
	"\xb4T\xab\xa8\xbf\x89(u\xcf\xb45m=T(\xba" +
	"\x9eY\xf4j\xf5\xbf\x9c\x99\x08V\xa4\xae:\xbe\x8e=" +
	"\xd1#\xab\xe3\xebIW\xf6\xfcZ\x06\x7f\xaa\xc2\x1b\x11" +
	"\xa19\xfa\xcb!\xa0\x99\x90\x1a\x97\x92@s\xf4\xffV" +
	">\xaf\x99\x95\xbfY\xde\xb8\xb5n\xd4\xe6\xbf{e." +
	"\xe8C\xf1F}\x95F\xed\x0c\x99\xa0\x91\x1bZ\xd8\xf9" +
	"\x0d\x9b\x08\x7f\x05\x00\x00\xff\xff\xb1}\xa66"

func init() {
	schemas.Register(schema_d91d0c9586c33e4f,
		0x806a8662cb3ccd55,
		0x80b73bae50b117f8,
		0x813357de5bbe6ce0,
		0x832efb95fcd6f26a,
		0x8d8b9bdeab971ab3,
		0x918e03b05c690a3b,
		0xa482971bef67617a,
		0xa6d53b2857f5de47,
		0xb169ce07794d2b2f,
		0xb3f078772ec8e414,
		0xcc11a9f70519ba80,
		0xcdfcd009fcbc797e,
		0xd62175b492ee4332,
		0xdf03095de4d6a4a3,
		0xe46b95066deca16c,
		0xe93244cfb7f0d3ba,
		0xfe9f6757811fca23)
}
