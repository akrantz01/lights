// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: lights.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	// Set the color of a set of pixels
	Set(ctx context.Context, in *SetArgs, opts ...grpc.CallOption) (*Empty, error)
	// Set the color of all pixels at the same time
	SetAll(ctx context.Context, in *SetAllArgs, opts ...grpc.CallOption) (*Empty, error)
	// Fill the entire strip with the given color
	Fill(ctx context.Context, in *Color, opts ...grpc.CallOption) (*Empty, error)
	// Set the brightness of the strip. Only values 0-100 inclusive are accepted
	Brightness(ctx context.Context, in *BrightnessArgs, opts ...grpc.CallOption) (*Empty, error)
	// Run the specified animation by id. Once started, no other actions can be performed until stopped.
	StartAnimation(ctx context.Context, in *StartAnimationArgs, opts ...grpc.CallOption) (*Empty, error)
	// Stop the currently running animation. This method is idempotent.
	StopAnimation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Register an animation with an associated id
	RegisterAnimation(ctx context.Context, in *RegisterAnimationArgs, opts ...grpc.CallOption) (*AnimationStatus, error)
	// Remove an animation from the registry by id
	UnregisterAnimation(ctx context.Context, in *UnregisterAnimationArgs, opts ...grpc.CallOption) (*Empty, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Set(ctx context.Context, in *SetArgs, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/lights.Controller/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SetAll(ctx context.Context, in *SetAllArgs, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/lights.Controller/SetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Fill(ctx context.Context, in *Color, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/lights.Controller/Fill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Brightness(ctx context.Context, in *BrightnessArgs, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/lights.Controller/Brightness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) StartAnimation(ctx context.Context, in *StartAnimationArgs, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/lights.Controller/StartAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) StopAnimation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/lights.Controller/StopAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) RegisterAnimation(ctx context.Context, in *RegisterAnimationArgs, opts ...grpc.CallOption) (*AnimationStatus, error) {
	out := new(AnimationStatus)
	err := c.cc.Invoke(ctx, "/lights.Controller/RegisterAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) UnregisterAnimation(ctx context.Context, in *UnregisterAnimationArgs, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/lights.Controller/UnregisterAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	// Set the color of a set of pixels
	Set(context.Context, *SetArgs) (*Empty, error)
	// Set the color of all pixels at the same time
	SetAll(context.Context, *SetAllArgs) (*Empty, error)
	// Fill the entire strip with the given color
	Fill(context.Context, *Color) (*Empty, error)
	// Set the brightness of the strip. Only values 0-100 inclusive are accepted
	Brightness(context.Context, *BrightnessArgs) (*Empty, error)
	// Run the specified animation by id. Once started, no other actions can be performed until stopped.
	StartAnimation(context.Context, *StartAnimationArgs) (*Empty, error)
	// Stop the currently running animation. This method is idempotent.
	StopAnimation(context.Context, *Empty) (*Empty, error)
	// Register an animation with an associated id
	RegisterAnimation(context.Context, *RegisterAnimationArgs) (*AnimationStatus, error)
	// Remove an animation from the registry by id
	UnregisterAnimation(context.Context, *UnregisterAnimationArgs) (*Empty, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) Set(context.Context, *SetArgs) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedControllerServer) SetAll(context.Context, *SetAllArgs) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAll not implemented")
}
func (UnimplementedControllerServer) Fill(context.Context, *Color) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fill not implemented")
}
func (UnimplementedControllerServer) Brightness(context.Context, *BrightnessArgs) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Brightness not implemented")
}
func (UnimplementedControllerServer) StartAnimation(context.Context, *StartAnimationArgs) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAnimation not implemented")
}
func (UnimplementedControllerServer) StopAnimation(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAnimation not implemented")
}
func (UnimplementedControllerServer) RegisterAnimation(context.Context, *RegisterAnimationArgs) (*AnimationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAnimation not implemented")
}
func (UnimplementedControllerServer) UnregisterAnimation(context.Context, *UnregisterAnimationArgs) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterAnimation not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Controller/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Set(ctx, req.(*SetArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Controller/SetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SetAll(ctx, req.(*SetAllArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Fill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Color)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Fill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Controller/Fill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Fill(ctx, req.(*Color))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Brightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrightnessArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Brightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Controller/Brightness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Brightness(ctx, req.(*BrightnessArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_StartAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAnimationArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).StartAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Controller/StartAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).StartAnimation(ctx, req.(*StartAnimationArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_StopAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).StopAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Controller/StopAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).StopAnimation(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_RegisterAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAnimationArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RegisterAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Controller/RegisterAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RegisterAnimation(ctx, req.(*RegisterAnimationArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_UnregisterAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterAnimationArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).UnregisterAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Controller/UnregisterAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).UnregisterAnimation(ctx, req.(*UnregisterAnimationArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lights.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Controller_Set_Handler,
		},
		{
			MethodName: "SetAll",
			Handler:    _Controller_SetAll_Handler,
		},
		{
			MethodName: "Fill",
			Handler:    _Controller_Fill_Handler,
		},
		{
			MethodName: "Brightness",
			Handler:    _Controller_Brightness_Handler,
		},
		{
			MethodName: "StartAnimation",
			Handler:    _Controller_StartAnimation_Handler,
		},
		{
			MethodName: "StopAnimation",
			Handler:    _Controller_StopAnimation_Handler,
		},
		{
			MethodName: "RegisterAnimation",
			Handler:    _Controller_RegisterAnimation_Handler,
		},
		{
			MethodName: "UnregisterAnimation",
			Handler:    _Controller_UnregisterAnimation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lights.proto",
}
